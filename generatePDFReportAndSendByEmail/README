Sales summary

In this section, let's view the summary of last month's sales for all the models offered by the company. This data is in a JSON file named car_sales.json. Let's have a look at it.

cat car_sales.json

Output:

To simplify the JSON structure, here is an example of one of the JSON objects among the list.


{
        "id": 47,
        "car": {
                "car_make": "Lamborghini",
                "car_model": "Murciélago",
                "car_year": 2002
        },
        "price": "$13724.05",
        "total_sales": 149
}


Here id, car, price and total_sales are the field names (key).

The script 'cars.py' already contains part of the work, but learners need to complete the task by writing the
    remaining pieces. The script **ALREADY** calculates the car model with the most revenue (price * total_sales)
    in the process_data method.

    Learners need to add the following:

Calculate the car model which had the **MOST SALES** by completing the process_data method, and then appending
    a formatted string to the 'Summary List' in the below format:

"The {car model} had the most sales: {total sales}"


Calculate the **MOST POPULAR** car_year across all car make/models (in other words, find the **TOTAL COUNT** of
    cars with the car_year equal to 2005, equal to 2006, etc. and then figure out the most popular year) by
    completing the process_data method, and append a formatted string to the summary list in the below format:

"The most popular year was {year} with {TOTAL sales IN THAT YEAR - Aggregate Total Sales for that Year} sales."


The challenge

Here, you are going to update the script 'cars.py'. You will be using the above JSON data to process information.
    A part of the script is already done for you, where it calculates the car model with the most revenue (price * total_sales). You should now fulfil the following objectives with the script:


--> Calculate the car model which had the most sales by completing the process_data method, and then appending a formatted string to the summary list in the below format:

"The {car model} had the most sales: {total sales}"

a. Call format_car method for the car model.


--> Calculate the most popular car_year across all car make/models (in other words, find the total count of cars with the car_year equal to 2005, equal to 2006, etc. and then figure out the most popular year) by completing the process_data method, and append a formatted string to the summary list in the below format:

"The most popular year was {year} with {total sales in that year} sales."


Hint: Find the total count of cars with the car_year equal to 2005, equal to 2006, etc. and then figure out the most popular year.



**** Generate PDF and send Email *****

Once the data is collected, you will also need to further update the script to GENERATE a PDF report and
    automatically send it through email.


--> To generate a PDF:

Use the reports.generate() function within the main function.


--> The PDF should contain:

A summary paragraph which contains the most sales/most revenue/most popular year values worked out in the previous step.


Note: To add line breaks in the PDF, use: <br/> between the lines.


A 'table' which contains all the information parsed from the JSON file, organised by id_number. The car details
    should be combined into one column in the form <car_make> <car_model> (<car_year>).


Note: You can use the 'cars_dict_to_table' Function for the above task.


Example:

ID      Car                     Price                   Total Sales

47      Acura TL (2007)         €14459,15               1192

73      Porsche 911 (2010)      €6057,74                882

85      Mercury Sable (2005)    €45660,46               874



--> To send the PDF through email:

Once the PDF is generated, you need to send the email, using the 'emails.generate()' and 'emails.send()' methods.

Use the following details to pass the parameters to emails.generate():

From: automation@example.com
To: <user>@example.com
Subject line: Sales summary for last month
E-mail Body: The same summary from the PDF, but using \n between the lines
Attachment: Attach the PDF path i.e. generated in the previous step







