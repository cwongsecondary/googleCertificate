#!/usr/bin/env python3

import json
import locale
import sys
import emails
import os
import reports
from reportlab.platypus import Paragraph, Spacer, Table, Image
from reportlab.platypus import SimpleDocTemplate
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.units import inch
from email.message import EmailMessage

def load_data(filename):                                  
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
    car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.
  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, '') 
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  most_popular = {}
  winner_year_total_sales = {}
  most_popular_year_count = {}
  car_sales_for_pdf = {}

  for item in data:
  # Calculate the revenue generated by this model (price * total_sales)
  # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

  # TODO: also handle max sales                                           # max_sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item

  # Dict for PDF
    if item["car"]["car_year"] not in car_sales_for_pdf:
      car_sales_for_pdf = data.copy()


  # TODO: also handle most popular car_year                               # car year - total_sales
    if item["car"]["car_year"] not in most_popular:                       # car_year - count
      most_popular[item['car']['car_year']] = item["total_sales"]         # Track Year and its total_sales
      most_popular_year_count[item['car']['car_year']] = 1                # Track Frequency of Year
    else:
      most_popular[item['car']['car_year']] += item["total_sales"]        # Aggregate total_sales if exists
      most_popular_year_count[item['car']['car_year']] += 1               # Increment counter Year if exists



  sorted_most_popular_year_count = sorted(most_popular_year_count.items(), key=lambda x:x[1], reverse=True)
  winner_year = sorted_most_popular_year_count[0][0]                  

  for k, v in most_popular.items():
    if k == winner_year:
      winner_year_total_sales = v                                   
  
  
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most Sales: {}".format(
      format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with: {} sales.".format(winner_year, winner_year_total_sales),
  ]


  return summary
  

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data



def main(argv):
  data = load_data("/Users/chriswong/car_sales.json")    
  summary = process_data(data)
  text_summary = "\n".join(summary)
  print(text_summary)


  # Generate PDF using 'reports.generate()'
  table_data = cars_dict_to_table(data)
  reports.generate("/tmp/cars.pdf", "Sales summary for last month", "<br/>".join(summary), table_data)


  # TODO: send the PDF report as an email attachment
  # Send PDF using 'emails.generate' and emails.send()
  sender = "automation@example.com"
  receiver = "chriswong@localhost"       #"{}@example.com".format(os.environ.get('USER'))
  attachment = "/tmp/cars.pdf"
  subject = "Sales summary for last month"
  body = "\n".join(summary)
  message = emails.generate(sender, receiver, subject, body, attachment)
  emails.send(message)                                                   # emails.send()



if __name__ == "__main__":
  main(sys.argv)
